// Mocks generated by Mockito 5.4.5 from annotations
// in booqs_mobile/test/widget/premium_plan_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:booqs_mobile/utils/analytics_service.dart' as _i3;
import 'package:booqs_mobile/utils/purchase_service.dart' as _i5;
import 'package:firebase_analytics/firebase_analytics.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:purchases_flutter/purchases_flutter.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseAnalytics_0 extends _i1.SmartFake
    implements _i2.FirebaseAnalytics {
  _FakeFirebaseAnalytics_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AnalyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalyticsService extends _i1.Mock implements _i3.AnalyticsService {
  MockAnalyticsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseAnalytics get firebaseAnalyticsInstance => (super.noSuchMethod(
        Invocation.getter(#firebaseAnalyticsInstance),
        returnValue: _FakeFirebaseAnalytics_0(
          this,
          Invocation.getter(#firebaseAnalyticsInstance),
        ),
      ) as _i2.FirebaseAnalytics);

  @override
  set firebaseAnalyticsInstance(
          _i2.FirebaseAnalytics? _firebaseAnalyticsInstance) =>
      super.noSuchMethod(
        Invocation.setter(
          #firebaseAnalyticsInstance,
          _firebaseAnalyticsInstance,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> logBeginCheckout() => (super.noSuchMethod(
        Invocation.method(
          #logBeginCheckout,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setCurrentScreen(String? screenName) => (super.noSuchMethod(
        Invocation.method(
          #setCurrentScreen,
          [screenName],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> logPremiumPlanView() => (super.noSuchMethod(
        Invocation.method(
          #logPremiumPlanView,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> logPurchaseAttempt(String? planType) => (super.noSuchMethod(
        Invocation.method(
          #logPurchaseAttempt,
          [planType],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> logPurchaseSuccess(String? planType) => (super.noSuchMethod(
        Invocation.method(
          #logPurchaseSuccess,
          [planType],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> logPurchaseFailed(String? planType) => (super.noSuchMethod(
        Invocation.method(
          #logPurchaseFailed,
          [planType],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [PurchaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPurchaseService extends _i1.Mock implements _i5.PurchaseService {
  MockPurchaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isExecuting => (super.noSuchMethod(
        Invocation.getter(#isExecuting),
        returnValue: false,
      ) as bool);

  @override
  set isExecuting(bool? _isExecuting) => super.noSuchMethod(
        Invocation.setter(
          #isExecuting,
          _isExecuting,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> initPlatformState() => (super.noSuchMethod(
        Invocation.method(
          #initPlatformState,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i6.Package?> fetchMonthlyPackage() => (super.noSuchMethod(
        Invocation.method(
          #fetchMonthlyPackage,
          [],
        ),
        returnValue: _i4.Future<_i6.Package?>.value(),
      ) as _i4.Future<_i6.Package?>);

  @override
  _i4.Future<_i6.Package?> fetchAnnualPackage() => (super.noSuchMethod(
        Invocation.method(
          #fetchAnnualPackage,
          [],
        ),
        returnValue: _i4.Future<_i6.Package?>.value(),
      ) as _i4.Future<_i6.Package?>);

  @override
  _i4.Future<bool> purchasePachage(
    _i6.Package? package,
    String? entitlementIdentifier,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #purchasePachage,
          [
            package,
            entitlementIdentifier,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> purchaseMonthlyPlan() => (super.noSuchMethod(
        Invocation.method(
          #purchaseMonthlyPlan,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> purchaseAnnualPlan() => (super.noSuchMethod(
        Invocation.method(
          #purchaseAnnualPlan,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<String> fetchProductID() => (super.noSuchMethod(
        Invocation.method(
          #fetchProductID,
          [],
        ),
        returnValue: _i4.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #fetchProductID,
            [],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<bool> syncSubscription(_i6.CustomerInfo? customerInfo) =>
      (super.noSuchMethod(
        Invocation.method(
          #syncSubscription,
          [customerInfo],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> getOrCreateSubscriber() => (super.noSuchMethod(
        Invocation.method(
          #getOrCreateSubscriber,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  bool isAllExpired(_i6.CustomerInfo? customerInfo) => (super.noSuchMethod(
        Invocation.method(
          #isAllExpired,
          [customerInfo],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<bool> enablePremiumOnDB() => (super.noSuchMethod(
        Invocation.method(
          #enablePremiumOnDB,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> disablePremiumOnDB() => (super.noSuchMethod(
        Invocation.method(
          #disablePremiumOnDB,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> deleteSubscriber(String? reason) => (super.noSuchMethod(
        Invocation.method(
          #deleteSubscriber,
          [reason],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> restore() => (super.noSuchMethod(
        Invocation.method(
          #restore,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
